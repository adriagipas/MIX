* Inverse in place
* 1.3.3 Program I
*
* L'algorisme original és un troç de codi d'un programa que té les
* dades carregades. El troç de codi que carrega les dades i les mostra
* per pantalla és meu.  El format és un número en cada paraula en
* digits decimals. Una paraula que siguen tot espais indica fi de
* números. S'enten que el primer número és X[1], el segon X[2], etc. i
* que X és una permutació.

* Buffer i macros. X2 és un buffer con carrege les dades, X=X2-1 i és
* el buffer on que espera trobar l'algorisme, ja que el pimer element
* és X[1]. Aprofit per a guardar en X[0] la llargaria.
MAXWDS	 EQU	1200
	 ORIG	100
X	 EQU	*
N	 ORIG	*+1
X2	 ORIG	*+MAXWDS
OUTBUF	 ORIG	*+24
CARDS	 EQU	16
PRINTER	 EQU	18

* Carrega dades. I1 (Valor provisional de N) I2 (posició en el buffer)
* I3 (iterador)
BEGIN	 ENT1	0
	 ENT2	0
3H	 IN	X2,2(CARDS)
	 ENT3	16
	 JBUS	*(CARDS)	 	 
2H	 LDX	X2,2
	 JXZ	1F
	 ENTA	0
	 NUM
	 STA	X2,2
	 INC1	1
	 INC2	1
	 DEC3	1
	 J3NZ	2B
	 CMP2	=MAXWDS-16=
	 JLE	3B
	 HLT	666
1H	 J1Z	*-1
	 ST1	N

* L'algorisme.
	 LD1	N
	 ENT3	-1
2H	 LD2N	X,1
	 J2P	5F
3H	 ST3	X,1
	 ENN3	0,1
	 ENN1	0,2
	 LD2N	X,1
4H	 J2N	3B
	 ENN2	0,3
5H	 ST2	X,1
6H	 DEC1	1
	 J1P	2B

* Mostra el vector X per pantalla. Vaig a fer-ho fàcil, faré el procés
* contrari, en cada paraula un element, podria currarme-ho més, però
* tenint en compte les ganes i que és el primer codi que programe jo
* ja està prou be. I1 (iterador), I2 (iterador sobre X), I3 (iterador
* sobre el buffer)
     	 LD1	N
	 ENT2  	0
	 ENT3	0
2H	 LDA	X2,2
	 CHAR
	 STX	OUTBUF,3
	 INC2	1
	 INC3	1
	 CMP3	=24=
	 JNE	1F
	 OUT	OUTBUF(PRINTER)
	 ENT3	0
	 JBUS	*(PRINTER)
1H	 DEC1	1
	 J1NZ	2B
	 J3Z	1F
2H	 STZ	OUTBUF,3
	 INC3	1
	 CMP3	=24=
	 JNE	2B
	 OUT	OUTBUF(PRINTER)
	 JBUS	*(PRINTER)
1H	 HLT
	 END	 BEGIN
